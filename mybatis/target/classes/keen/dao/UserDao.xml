<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="keen.dao.UserDao">
    <!-- 配置查询结果的列名和实体类的属性名-->
    <resultMap id="userAccountMap" type="user">
        <!-- 主键字段-->
        <id property="id" column="id"/>
        <!-- 非主键字段-->
        <result property="username" column="username"/>
        <result property="address" column="address"/>
        <result property="sex" column="sex"/>
        <result property="birthday" column="birthday"/>
        <!-- 配置user对象中accounts集合的映射-->
        <collection property="accounts" ofType="account">
            <id property="id" column="aid"/><!-- 这里的aid是account表的id的别名-->
            <result property="uid" column="uid"/>
            <result property="money" column="money"/>
        </collection>
        <collection property="roles" ofType="role">
            <id property="roleId" column="rid"/>
            <result property="roleName" column="role_Name"/>
            <result property="roleDesc" column="role_Desc"/>
        </collection>
    </resultMap>

<!--    用来配置默认语句 注意不能加分号(;)-->
    <sql id="defaultUser">
        SELECT * FROM user
    </sql>
    <!--配置查询所有-->
    <select id="findAll" resultMap="userAccountMap">
        <!--select *
        from user-->
        SELECT *,a.id as aid
        FROM user AS u LEFT OUTER JOIN account AS a
        ON u.id = a.uid;
    </select>

    <!-- 查询以user为主表,role为从表的所有信息-->
   <select id="findAllUserToRole" resultMap="userAccountMap">
       SELECT u.*,r.id as rid,r.ROLE_NAME,r.ROLE_DESC
        FROM user as u
            LEFT OUTER JOIN user_role as ur on u.id = ur.UID
            LEFT OUTER JOIN role r on ur.RID = r.ID
   </select>

    <!--    增加用户-->
    <!--    参数类型是User 所以parameterType用User的全限定类名-->
    <insert id="saveUser" parameterType="user">
        <!--    配置插入操作后,获取插入数据的id-->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>

        insert into user(username,address,sex,birthday)
        values(#{username},#{address},#{sex},#{birthday}) ;
    </insert>

    <!--  删除用户  -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete
        from user
        where id = #{id}
    </delete>

    <!--    更新用户-->
    <update id="updateUser" parameterType="user">
        update user
        set username=#{username},
            address=#{address},
            sex=#{sex},
            birthday=#{birthday}
        where id = #{id}
    </update>

    <!--    根据id查询用户-->
    <select id="findById" parameterType="java.lang.Integer" resultType="user">
        select *
        from user
        where id = #{id}
    </select>

    <!--    根据名称查询用户-->
    <select id="findByName" parameterType="string" resultType="user">
        select *
        from user
        where username like #{username}
    </select>

    <!--    获取用户数量-->
    <select id="findTotal" resultType="int">
        SELECT count(id)
        FROM user
    </select>

    <!--  根据queryVo的条件查询用户-->
    <select id="findUserByVo" parameterType="QueryVo" resultType="user">
        SELECT *
        FROM user
        WHERE username LIKE #{user.username}<!-- user为QueryVo的属性-->
    </select>

    <!--    根据条件查询-->
    <select id="findUserByCondition" resultMap="userAccountMap" parameterType="user">
        SELECT *
        FROM user
        <where>
            <if test="username != null">
                AND username = #{username}
            </if>
        </where>
    </select>

    <!--    根据queryvo中的Ids集合实现查询用户列表-->
    <select id="findUserInIds" resultMap="userAccountMap" parameterType="QueryVo">
        <!-- 使用sql标签的设置默认sql语句-->
        <include refid="defaultUser"/>
        <where>
            <if test="ids !=null and ids.size()>0">
                <foreach collection="ids" open="and id in (" close=")" item="id" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>



</mapper>