<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">
<!--配置spring的IOC容器,把service对象配置进来-->
    <bean id="accountService" class="service.impl.AccountServiceImpl"/>
<!--    spring中基于XML的AOP配置步骤
        1. 把通知bean也交给spring来管理
        2. 使用aop:config标签 表明开始AOP 的配置
        3. 使用aop:aspect 标签 表明配置切面
                id属性: 是给切面提供一个唯一标识
                ref属性: 是制定通知类bean的id
        4. 在aop:aspect 标签的内部使用对应标签来配置通知的类型
                aop:before : 表示配置前置通知
                    method属性 : 用于指定Logger类中哪个方法是前置通知
                    pointcut属性: 用于指定切入点表达式,该表达式的含义指的是对业务层中哪些方法增强

                    切入点表达式的写法:
                        关键字: execution(表达式)
                        表达式:
                            访问修饰符(可省略)  返回值(*)  包名.包名...类名.方法名(参数列表)
                            包名可以使用..表示当前包及其子包
                                service.impl.AccountServiceImpl=*..AccountServiceImpl
                            参数列表:
                                可以直接写数据类型:
                                可以使用通配符表示任意类型,但必须有参数
                                可以使用..表示有无参数均可,有参数是任意类型

                            通常写法:
                                切到业务层实现类下的所有方法
                                * service.impl.*.*(..)
                        例如
                            public void service.impl.AccountServiceImpl.saveAccount()
                        全通配符写法:
                            * *..*.*(..)
                            -->
<!--    配置Logger类-->
    <bean id="logger" class="utils.Logger"/>
<!--    配置AOP-->
    <aop:config>

        <aop:aspect id="logAdvice" ref="logger">
            <!--<aop:before method="printLog" pointcut="
            execution( * *..AccountServiceImpl.saveAccount())"/>-->
<!--            前置通知-->
            <aop:before method="beforePrintLog" pointcut-ref="pt1"/>
<!--            后置通知-->
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"/>
<!--            异常通知-->
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"/>
<!--            最终通知-->
            <aop:after method="afterPrintLog" pointcut-ref="pt1"/>

<!--            配置切入点表达式
                此标签写在aop:aspect标签内部职能当前切面使用
                可以配置在aop:aspect标签外面 aop:config里面  可以应用在所有切面-->
            <aop:pointcut id="pt1" expression="execution(* service.impl.*.*(..))"/>

<!--            配置环绕通知-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"/>
        </aop:aspect>
    </aop:config>
</beans>