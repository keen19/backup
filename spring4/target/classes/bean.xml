<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">

<!--    把对象的创建交给spring来管理-->
<!--    spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
        -->

<!--    创建bean的三种方式
        第一种方式: 使用默认构造函数创建
            在spring的配置文件中使用bean标签,配以id和class属性之后,且没有其他属性和标签,
            注意,如果类中没有默认构造函数,则无法使用-->
<!--    <bean id="accountService" class="keen.service.impl.AccountServiceImpl"/>-->
<!--    第二种方式:使用普通工厂中的方法创建对象(使用某个类中的方法创建对象,并放入spring容器-->
<!--    <bean id="instanceFactory" class="keen.InstanceFactory"/>-->
<!--    <bean id="accountDao" factory-bean="instanceFactory" factory-method="getService" />-->
<!--    第三种方式:使用静态工厂中的静态方法创建对象(用某个类中的静态方法创建对象,并放入spring容器-->
    <bean id="accountDao" class="keen.StaticFactory" factory-method="getService"/>

<!--    bean对象的作用范围
        scope属性:
            singleton: 单例 默认使用
            prototype: 多例
            request:   作用于web应用的请求范围
            session : 作用于web应用的会话范围
            global-session: 全局会话-->
<!--    bean对象的生命周期:
        单例对象:
            出生:当容器创建时对象出生
            活着:只要容器还在,对象一直活着
            死亡:容器销毁,对象消亡
            总结:生命周期和容器相同
        多例对象:-->
    <bean id="accountService" class="keen.service.impl.AccountServiceImpl"
        scope="singleton" init-method="init" destroy-method="destroy"/>

</beans>